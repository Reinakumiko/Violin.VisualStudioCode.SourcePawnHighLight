{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "SourcePawn",
	"patterns": [
		{
			"include": "#preprocessor"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#characters"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#include"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#methodmap"
		}
	],
	"repository": {
		"preprocessor": {
			"patterns": [
				{
					"match": "^\\s*#\\s*(define|pragma)\\b\\s*(.*?)?\\b\\s(.*)?",
					"name": "meta.preprocessor.sourcepawn",
					"captures": {
						"2": {
							"name": "keyword.operator",
							"patterns": [
								{
									"match": ".*",
									"name": "emphasis"
								}
							]
						},
						"3": {
							"patterns": [
								{
									"include": "#comments"
								}
							]
						}
					}
				},
				{
					"match": "^\\s*#\\s*(if|endif|undef|endinput)\\b\\s*(.*?)*",
					"name": "meta.preprocessor.sourcepawn",
					"captures": {
						"2": {
							"name": "keyword.operator",
							"patterns": [
								{
									"match": ".*",
									"name": "emphasis"
								}
							]
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.sourcepawn",
					"match": "\\b(if|while|for|return|break|case|switch)\\b"
				},
				{
					"name": "keyword.methodmap.sourcepawn",
					"match": "\\b(methodmap|get|set|char|int|float|void|property)\\b"
				},
				{
					"name": "keyword.declare.sourcepawn",
					"match": "\\b(_|new|decl|Float|String|bool|const|any|enum|typedef|typeset|function)\\b"
				},
				{
					"name": "keyword.function.sourcepawn",
					"match": "\\b(native|stock|public|forward|static)\\b"
				}
			]
		},
		"characters": {
			"patterns": [
				{
					"name": "string.quoted.double.sourcepawn",
					"match": "'.'"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.sourcepawn",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.sourcepawn",
					"match": "\\\\."
				}
			]
		},
		"include": {
			"patterns": [
				{
					"match": "#include\\b\\s((<|\\\").*?(>|\\\"))",
					"name": "meta.preprocessor.include.sourcepawn",
					"captures": {
						"1": {
							"name": "string.quoted"
						}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "comment.block.documentation.sourcepawn"
						}
					},
					"end": "\\*/\\n?",
					"name": "comment.block.sourcepawn",
					"patterns": [
						{
							"match": "\\b@[\\w]+?\\b",
							"name": "comment.block.documentation"
						}
					]
				},
				{
					"begin": "//",
					"captures": {
						"1": {
							"name": "comment.block.documentation.sourcepawn"
						}
					},
					"end": "$\\n?",
					"name": "comment.line.double-slash.sourcepawn"
				}
			]
		},
		"methodmap": {
			"patterns": [
				{
					"name": "entity.other.attribute-name",
					"match": "\\b(Action|Handle|ConVar)\\b",
					"captures": {
						"1": {
							"name": "emphasis"
						}
					}
				},
				{
					"name": "meta.structure.dictionary.key.python",
					"match": "enum\\s+?[_a-zA-Z][_a-zA-Z0-9]+?\\b",
					"captures": {
						"0": {
							"name": "emphasis"
						}
					}
				}
			]
		}
	},
	"scopeName": "source.sourcepawn"
}