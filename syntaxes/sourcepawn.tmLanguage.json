{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "SourcePawn",
	"patterns": [
		{
			"include": "#preprocessor"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#characters"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#include"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#methodmap"
		},
		{
			"include": "#numeric"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#enumeration"
		}
	],
	"repository": {
		"preprocessor": {
			"patterns": [
				{
					"match": "^\\s*#\\s*(define|pragma)\\b\\s*(.*?)?\\b\\s(.*)?",
					"captures": {
						"0": {
							"name": "meta.preprocessor.sourcepawn"
						},
						"1": {
							"name": "meta.preprocessor.sourcepawn"
						},
						"2": {
							"name": "name.preprocessor.declare.sourcepawn"
						},
						"3": {
							"name": "meta.preprocessor.string",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#numeric"
								},
								{
									"include": "#strings"
								}
							]
						}
					}
				},
				{
					"match": "^\\s*#\\s*(if|else)\\b\\s((!)?defined|if)\\b(.*)?",
					"name": "meta.preprocessor.sourcepawn",
					"captures": {
						"4": {
							"name": "name.preprocessor.declare.sourcepawn"
						}
					}
				},
				{
					"match": "^\\s*#\\s*(else|endif|undef|endinput)\\b",
					"name": "meta.preprocessor.sourcepawn"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.sourcepawn",
					"match": "\\b(if|else|while|for|return|break|case|switch|const)\\b"
				},
				{
					"name": "keyword.boolearn.sourcepawn",
					"match": "\\b(false|true)\\b"
				},
				{
					"name": "keyword.methodmap.sourcepawn",
					"match": "\\b(get|set|property)\\b"
				},
				{
					"name": "keyword.object.sourcepawn",
					"match": "\\b(new)\\b"
				},
				{
					"name": "keyword.declare.other.sourcepawn",
					"match": "\\b(decl|stock)\\b"
				},
				{
					"name": "keyword.declare.basetype.sourcepawn",
					"match": "\\b(_|Float|String|Function)\\b"
				},
				{
					"name": "keyword.function.sourcepawn",
					"match": "\\b(native|static|typedef|typeset)\\b"
				},
				{
					"name": "keyword.declare.function.sourcepawn",
					"match": "(public|forward)\\b"
				},
				{
					"name": "keyword.basetype.sourcepawn",
					"match": "\\b(bool|any|float|void|int|char)\\b"
				},
				{
					"name": "keyword.convert.soucepawn",
					"match": "\\bview_as<([_a-zA-Z][_a-zA-Z0-9]+?)>",
					"captures": {
						"1": {
							"name": "keyword.basetype.sourcepawn"
						},
						"2": {
							"name": "entity.class.basetype.sourcepawn"
						}
					}
				}
			]
		},
		"characters": {
			"patterns": [
				{
					"name": "string.quoted.double.sourcepawn",
					"match": "'.'"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.sourcepawn",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.sourcepawn",
					"match": "\\\\."
				}
			]
		},
		"include": {
			"patterns": [
				{
					"match": "#include\\b\\s((<|\\\").*?(>|\\\"))",
					"name": "meta.preprocessor.include.sourcepawn",
					"captures": {
						"1": {
							"name": "string.quoted"
						}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "comment.block.documentation.sourcepawn"
						}
					},
					"end": "\\*/\\n?",
					"name": "comment.block.sourcepawn",
					"patterns": [
						{
							"match": "\\b@[\\w]+?\\b",
							"name": "comment.block.documentation"
						}
					]
				},
				{
					"begin": "//",
					"captures": {
						"1": {
							"name": "comment.block.documentation.sourcepawn"
						}
					},
					"end": "$\\n?",
					"name": "comment.line.double-slash.sourcepawn"
				}
			]
		},
		"methodmap": {
			"patterns": [
				{
					"name": "keyword.declare.methodmap.sourcepawn",
					"match": "(methodmap)\\s+\\b([_a-zA-Z][_a-zA-Z0-9]+?)\\b\\s+(<\\s+\\b([_a-zA-Z][_a-zA-Z0-9]+?)\\b)?",
					"captures": {
						"1": {
							"name": "keyword.basetype.sourcepawn"
						},
						"2": {
							"name": "entity.class.types.sourcepawn"
						},
						"3": {
							"name": "entity.class.types.sourcepawn"
						}
					}
				},
				{
					"name": "entity.class.types.sourcepawn",
					"match": "\\b(Handle|ConVar|__nullable__)\\b"
				}
			]
		},
		"enumeration": {
			"patterns": [
				{
					"name": "entity.enumeration.types.sourcepawn",
					"match": "(enum)\\s+\\b([_a-zA-Z][_a-zA-Z0-9]+?)\\b",
					"captures": {
						"1": {
							"name": "keyword.basetype.sourcepawn"
						},
						"2": {
							"name": "entity.enumeration.types.sourcepawn"
						}
					}
				},
				{
					"name": "entity.enumeration.types.sourcepawn",
					"match": "\\b(Action)\\b"
				}
			]
		},
		"numeric": {
			"patterns": [
				{
					"match": "\\b0(x|X)[0-9a-fA-F_]+\\b",
					"name": "constant.numeric.hex.sourcepawn"
				},
				{
					"match": "\\-?\\b([0-9_]+)?\\.[0-9_]+\\b",
					"name": "constant.numeric.decumal.sourcepawn"
				},
				{
					"match": "\\-?\\b[0-9_]+\\b",
					"name": "constant.numeric.integer.sourcepawn"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"match": "\\!|\\$|%|&|\\*|\\+|\\-|\\.|/|\\:|<|=|>|\\?|\\^\\||~",
					"name": "operator.sourcepawn"
				},
				{
					"match": "\\(|\\)|\\[|\\]|\\{|\\}",
					"name": "quoter.operator.sourcepawn"
				}
			]
		}
	},
	"scopeName": "source.sourcepawn"
}